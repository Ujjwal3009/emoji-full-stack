version: '3.8'

services:
  server:
    build:
      context: ./emoji-reaction-backend
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - NODE_ENV=production
      - DEBUG=socket.io:*  # Enable socket.io debug logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  client:
    build:
      context: ./emoji-reaction
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_SOCKET_URL=http://localhost:5001
      - NODE_ENV=production
    depends_on:
      server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_COMPRESSION_TYPE: gzip
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_BATCH_SIZE: 100000
    ports:
      - "29092:29092"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  emoji-consumer:
    build:
      context: ./emoji-reaction-backend
      dockerfile: Dockerfile
    command: ["node", "dist/services/emoji-consumer.js"]
    depends_on:
      - kafka
      - mongodb

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    depends_on:
      - kafka
      - mongodb
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    volumes:
      - ./kafka-connect:/etc/kafka-connect/conf.d
    command: 
      - bash 
      - -c 
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        echo "Waiting for Kafka Connect to start"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -ne 200 ] ; do 
          echo "Waiting for Kafka Connect..."
          sleep 10 
        done
        echo "Creating MongoDB Connector"
        curl -X POST http://localhost:8083/connectors \
          -H "Content-Type: application/json" \
          -d @/etc/kafka-connect/conf.d/mongodb-sink.json
        sleep infinity
    networks:
      - app-network

  trend-consumer:
    build:
      context: ./emoji-reaction-backend
      dockerfile: Dockerfile
    command: ["node", "dist/services/trend-consumer.js"]
    depends_on:
      - kafka
      - mongodb
    volumes:
      - ./emoji-reaction-backend/logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data: 